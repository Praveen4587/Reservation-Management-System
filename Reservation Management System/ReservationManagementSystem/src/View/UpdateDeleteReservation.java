/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package View;

import Controller.ReservationController;
import Model.DBSearch;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;

public class UpdateDeleteReservation extends javax.swing.JFrame {

    /** Creates new form Reservation */
    private DBSearch dbSearch;

    public UpdateDeleteReservation() {
        initComponents();
        dbSearch = new DBSearch();

    }
    
    private String getSelectedDate() {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy/MM/dd"); // Set to yyyy-MM-dd format
        if (DoRInput.getDate() != null) {
            return sdf.format(DoRInput.getDate());
        } else {
            JOptionPane.showMessageDialog(this, "Please select a valid date.", "Error", JOptionPane.ERROR_MESSAGE);
            return null;
        }
    }
      
    public void clearField() {
        reservationIDInput.setText("");
        FullNameInput.setText("");
        emailInput.setText("");
        contactNumberInput.setText("");
        DoRInput.setDate(null);
        NoGInput.setText("");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        CloseBtn = new javax.swing.JLabel();
        getReservationDataBtn = new javax.swing.JButton();
        DeleteReservationBtn = new javax.swing.JButton();
        UpdateReservationBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        reservationIDLabel = new javax.swing.JLabel();
        reservationIDInput = new javax.swing.JTextField();
        FullNameInput = new javax.swing.JTextField();
        contactNumberInput = new javax.swing.JTextField();
        emailInput = new javax.swing.JTextField();
        DoRInput = new com.toedter.calendar.JDateChooser();
        NoGInput = new javax.swing.JTextField();
        NoGLable = new javax.swing.JLabel();
        DoRLable = new javax.swing.JLabel();
        EmailLabel = new javax.swing.JLabel();
        categoryLable = new javax.swing.JLabel();
        FullNameLable = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        CloseBtn.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        CloseBtn.setText("X");
        CloseBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                CloseBtnMouseClicked(evt);
            }
        });

        getReservationDataBtn.setText("Get Data");
        getReservationDataBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getReservationDataBtnActionPerformed(evt);
            }
        });

        DeleteReservationBtn.setText("Delete Reservation Details");
        DeleteReservationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteReservationBtnActionPerformed(evt);
            }
        });

        UpdateReservationBtn.setText("Update Reservation Details");
        UpdateReservationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateReservationBtnActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dubai", 1, 22)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Reservation Management System - Update & Delete Reservation");

        reservationIDLabel.setText("Reservation ID");

        FullNameInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FullNameInputActionPerformed(evt);
            }
        });

        contactNumberInput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                contactNumberInputActionPerformed(evt);
            }
        });

        NoGLable.setText("Number of Guests");

        DoRLable.setText("Date of Reservation");

        EmailLabel.setText("Email");

        categoryLable.setText("Contact Number");

        FullNameLable.setText("Full Name");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(130, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(CloseBtn)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(DeleteReservationBtn)
                        .addGap(37, 37, 37)
                        .addComponent(UpdateReservationBtn)
                        .addGap(63, 63, 63))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FullNameLable)
                            .addComponent(reservationIDLabel)
                            .addComponent(EmailLabel)
                            .addComponent(DoRLable)
                            .addComponent(categoryLable)
                            .addComponent(NoGLable))
                        .addGap(39, 39, 39)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(NoGInput)
                            .addComponent(emailInput)
                            .addComponent(contactNumberInput)
                            .addComponent(FullNameInput)
                            .addComponent(DoRInput, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(reservationIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(getReservationDataBtn)))
                        .addGap(152, 152, 152))))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(CloseBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 350, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(reservationIDInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(getReservationDataBtn))
                            .addComponent(reservationIDLabel))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(FullNameLable)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(FullNameInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(categoryLable)
                                    .addComponent(contactNumberInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(emailInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(EmailLabel))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(DoRLable)
                                    .addComponent(DoRInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(NoGLable)
                            .addComponent(NoGInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(41, 41, 41)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeleteReservationBtn)
                    .addComponent(UpdateReservationBtn))
                .addGap(23, 23, 23))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void CloseBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_CloseBtnMouseClicked
        dispose();
    }//GEN-LAST:event_CloseBtnMouseClicked

    private void getReservationDataBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getReservationDataBtnActionPerformed
        try {
            String reservationID = reservationIDInput.getText().trim();

            if (reservationID == null) {
                JOptionPane.showMessageDialog(this, "Please Type a reservationID.", "Warning", JOptionPane.WARNING_MESSAGE);
                return;
            }

            ResultSet resultSet = dbSearch.searchReservationDetailsByID(reservationID);

            if (resultSet != null && resultSet.next()) {
                FullNameInput.setText(resultSet.getString("name"));
                contactNumberInput.setText(resultSet.getString("contactNumber"));
                emailInput.setText(resultSet.getString("Email"));
                NoGInput.setText(resultSet.getString("NoG"));
                
                String dateString = resultSet.getString("DoR");
                SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");

                try {
                    Date date = dateFormat.parse(dateString);
                    DoRInput.setDate(date);
                } catch (ParseException e) {
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Invalid date format in database.", "Error", JOptionPane.ERROR_MESSAGE);
                }


            } else {
                JOptionPane.showMessageDialog(this, "No Reservation found for the Typed reservationID.", "No Data", JOptionPane.INFORMATION_MESSAGE);
            }

            if (resultSet != null && !resultSet.isClosed()) {
                resultSet.close();
            }
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(this, "An error occurred while searching for Reservations.", "Error", JOptionPane.ERROR_MESSAGE);
    }

    }//GEN-LAST:event_getReservationDataBtnActionPerformed

    private void DeleteReservationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteReservationBtnActionPerformed
            String reservationID = reservationIDInput.getText().trim();

        if (reservationID.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Reservation ReservationID must be filled out",
                "Input Error", JOptionPane.ERROR_MESSAGE);
        } else {
            // Confirm with the user before deleting
            int confirmation = JOptionPane.showConfirmDialog(null, "Are you sure you want to delete this Reservation Details?",
                "Confirm Deletion", JOptionPane.YES_NO_OPTION);

            // If user confirms deletion
            if (confirmation == JOptionPane.YES_OPTION) {
                try {
                    boolean success = ReservationController.deletedeleteReservation(reservationID);

                    if (success) {
                        JOptionPane.showMessageDialog(null, "Reservation Details deleted successfully",
                            "Deletion Successful", JOptionPane.INFORMATION_MESSAGE);
                        // Clear the input fields after successful deletion
                        clearField();
                    } else {
                        JOptionPane.showMessageDialog(null, "Failed to delete Reservation",
                            "Deletion Failed", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    // Handle SQL exception
                    JOptionPane.showMessageDialog(null, "An error occurred while deleting Reservation",
                        "Deletion Failed", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_DeleteReservationBtnActionPerformed

    private void UpdateReservationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateReservationBtnActionPerformed
        
        
        // Get the values from the fields
        String reservationID = reservationIDInput.getText().trim();
        String name = FullNameInput.getText().trim();
        String contactNumber = contactNumberInput.getText().trim();
        String email = emailInput.getText().trim();
        String DoR = getSelectedDate();
        String NoG = NoGInput.getText().trim();

        // Check if any of the fields are blank
        if (reservationID.isEmpty() || name.isEmpty() || contactNumber.isEmpty() 
                || email.isEmpty() || DoR.isEmpty() || NoG.isEmpty()) {
            // Show an error message
            JOptionPane.showMessageDialog(null, "All fields must be filled out", 
                    "Input Error", JOptionPane.ERROR_MESSAGE);
        } else {

            boolean success = false;
            try {
                success = ReservationController.updateReservation(reservationID, name, contactNumber, 
                    email, DoR, NoG);
            } catch (SQLException ex) {
                    ex.printStackTrace();
            }
            if (success) {
                JOptionPane.showMessageDialog(null, "Reservation information updated successfully",
                    "Update Successful", JOptionPane.INFORMATION_MESSAGE);
                clearField();
            } else {
                JOptionPane.showMessageDialog(null, "Failed to update Reservation information",
                    "Update Failed", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_UpdateReservationBtnActionPerformed

    private void FullNameInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FullNameInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_FullNameInputActionPerformed

    private void contactNumberInputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_contactNumberInputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_contactNumberInputActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UpdateDeleteReservation.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UpdateDeleteReservation().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CloseBtn;
    private javax.swing.JButton DeleteReservationBtn;
    private com.toedter.calendar.JDateChooser DoRInput;
    private javax.swing.JLabel DoRLable;
    private javax.swing.JLabel EmailLabel;
    private javax.swing.JTextField FullNameInput;
    private javax.swing.JLabel FullNameLable;
    private javax.swing.JTextField NoGInput;
    private javax.swing.JLabel NoGLable;
    private javax.swing.JButton UpdateReservationBtn;
    private javax.swing.JLabel categoryLable;
    private javax.swing.JTextField contactNumberInput;
    private javax.swing.JTextField emailInput;
    private javax.swing.JButton getReservationDataBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField reservationIDInput;
    private javax.swing.JLabel reservationIDLabel;
    // End of variables declaration//GEN-END:variables

}
